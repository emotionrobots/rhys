/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from 'react-three-fiber'
import { NotEqualStencilFunc } from 'three'

//comment here
const CONFIDENCE = 0.3

const getAngle = (p1, p2, c1, c2, m) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){
    return (Math.atan2(p2['position']['y'] - p1['position']['y'], p2['position']['x'] - p1['position']['x']) + c1) * m;
  }
  return c2 * m
}

const normalize = (min, max, val) => {
  return ((val - min) / (max - min))* Math.PI;
}

const getYRotation = (p1, p2, p3) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE && p3['score'] > CONFIDENCE){
    let e1 = Math.abs(p1['position']['x'] - p3['position']['x'])
    let e2 = Math.abs(p2['position']['x'] - p3['position']['x'])
    return normalize(-100, 100, e2-e1) - Math.PI/2;
  }
  return 0
}

const getZRotation = (p1, p2) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){
    let e1 = Math.abs(p1['position']['y'])
    let e2 = Math.abs(p2['position']['y'] )
    return normalize(-80, 80, e2-e1) - Math.PI/2;
  }
  return 0
}
//comment here

export default function Model(props) {
  let kp;

  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/whiteGolfer.glb')
  const { actions } = useAnimations(animations, group)

  //things need to be done
  /* remake getAngle */
  useFrame((state, delta) => {
    kp = props.getJoints()
    //create api with get angle, and create sliders for joints

    //array for getAngle
    //[nose, leftEye, rightEye, leftEar, rightEar, leftShoulder, rightShoulder, leftElbow, rightElbow, leftWrist, rightWrist, leftHip, rightHip, leftKnee, rightKnee, leftAnkle, rightAnkle]

    //array for WhiteGolfer
    //[pelvis, spine, spine1, spine2, neck, head, headnub, jaw, ponytailnub, Leye, Reye, clavicle, Rupperarm, Rforearm, Rhand, ... ]
    
    //4 Neck, 5 head
    //12 RUpperarm, 13 RForearm, 14RHand, 40 LUpperarm, 41 LForearm, 42 LHand, 

    //Right shoulder    
    nodes.Mesh007.skeleton.bones[12].rotation.z = nodes.Mesh007_1.skeleton.bones[12].rotation.z = nodes.Mesh007_2.skeleton.bones[12].rotation.z = getAngle(kp[8], kp[6], 0, 0, 1)
    //nodes.Mesh007.skeleton.bones[12].rotation.x = nodes.Mesh007_1.skeleton.bones[12].rotation.x = nodes.Mesh007_2.skeleton.bones[12].rotation.x = getAngle(kp[6], kp[8], 0, 0, -1)

    //Left shoulder
    nodes.Mesh007.skeleton.bones[40].rotation.z = nodes.Mesh007_1.skeleton.bones[40].rotation.z = nodes.Mesh007_2.skeleton.bones[40].rotation.z = getAngle(kp[9], kp[7], 0, 0, 1)

    //Right elbow
    //nodes.Mesh007.skeleton.bones[13].rotation.z = getAngle(kp[7], kp[9], 0, 0, -1)
    //nodes.Mesh007.skeleton.bones[13].rotation.x = getAngle(kp[7], kp[9], 0, 0, 1)

    //Right hand
    //nodes.Mesh007.skeleton.bones[14].rotation.z = getAngle(kp[9], kp[11], 0, 0, 1)
    //nodes.Mesh007.skeleton.bones[14].rotation.x = getAngle(kp[9], kp[11], 0, 0, 1)
    

/*         // Left arm & elbow
        nodes.Ch36.skeleton.bones[7].rotation.y = getAngle(kp[5], kp[7], 0, 0, -1)
        nodes.Ch36.skeleton.bones[9].rotation.x = getAngle(kp[7], kp[9], 0, 0, 1)
    
        //Right arm & elbow
        nodes.Ch36.skeleton.bones[31].rotation.y = getAngle(kp[8], kp[6], 0, 0, -1)
        nodes.Ch36.skeleton.bones[33].rotation.x = getAngle(kp[10], kp[8], 0, 0, -1)
        
        // Left leg & knee
        nodes.Ch36.skeleton.bones[55].rotation.z =  getAngle(kp[11], kp[13], (Math.PI/2), Math.PI, -1)
        //nodes.Ch36.skeleton.bones[56].rotation.z = getAngle(kp[15], kp[13], (Math.PI/2), 0, -1)
    
        // Right leg & knee
        nodes.Ch36.skeleton.bones[60].rotation.z =  getAngle(kp[12], kp[14], (Math.PI/2), Math.PI, -1)
        //nodes.Ch36.skeleton.bones[61].rotation.z = getAngle(kp[16], kp[14], (Math.PI/2), 0, -1)
    
        // Head
        nodes.Ch36.skeleton.bones[5].rotation.y = getYRotation(kp[1], kp[2], kp[0])
        nodes.Ch36.skeleton.bones[5].rotation.z = getZRotation(kp[1], kp[2]) */
  })

  console.log(nodes.Mesh007)
  console.log(nodes.Mesh007_1)
  console.log(nodes.Mesh007_2.skeleton)

  //to do console log skeleton.bones[x].name

  for(var i=0; i<81; i++){
    console.table([i, nodes.Mesh007_2.skeleton.bones[i].name])
  }
  

 

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Bip001" position={[-0.27, 2.32, 0.09]} rotation={[0, -1.55, 0.04]} scale={[0.03, 0.03, 0.03]}>
        <primitive object={nodes.Bip001_Pelvis} />
        <skinnedMesh
          geometry={nodes.Mesh007.geometry}
          material={materials['G_jersey.001']}
          skeleton={nodes.Mesh007.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Mesh007_1.geometry}
          material={materials['G_pants.001']}
          skeleton={nodes.Mesh007_1.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Mesh007_2.geometry}
          material={materials['G_arm.001']}
          skeleton={nodes.Mesh007_2.skeleton}
        />
        <skinnedMesh geometry={nodes.G_hat.geometry} material={materials['hat.001']} skeleton={nodes.G_hat.skeleton} />
        <skinnedMesh
          name="WH2"
          geometry={nodes.WH2.geometry}
          material={materials['head.001']}
          skeleton={nodes.WH2.skeleton}
          morphTargetDictionary={nodes.WH2.morphTargetDictionary}
          morphTargetInfluences={nodes.WH2.morphTargetInfluences}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/whiteGolfer.glb')
